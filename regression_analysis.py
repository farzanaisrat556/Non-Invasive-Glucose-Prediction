# -*- coding: utf-8 -*-
"""Regression analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TRDKOyREf4_UzPt52j4MfwzlpAJUnl4Y
"""

import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.cross_decomposition import PLSRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Define the file paths
X_file = '/content/drive/MyDrive/combined.csv'
Y_file = '/content/drive/MyDrive/Y.csv'

# Load the data from CSV files
X_data = pd.read_csv(X_file)
Y_data = pd.read_csv(Y_file)

# Extract the features and target variable from the data
X = X_data.values
Y = Y_data.values

# Split the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Calculate SEP, predicted values, and variance
pca = PCA()
pls = PLSRegression(n_components=2)

X_pca = pca.fit_transform(X_train)
X_pls = pls.fit_transform(X_train, Y_train)

Y_pred = pls.predict(X_test)

SEP = np.mean((Y_test - Y_pred) ** 2)
Var = np.sum(pca.explained_variance_ratio_)
RMSE = np.sqrt(mean_squared_error(Y_test, Y_pred))

# Print the results
print("SEP: ", SEP)
print("Predicted Values: ", Y_pred)
print("Variance of Principal Components: ", Var)
print("RMSE: ", RMSE)

# Plotting the scatter plot with trend line
plt.scatter(Y_test, Y_pred)
plt.xlabel('Actual Glucose Levels')
plt.ylabel('Predicted Glucose Levels')
plt.title('Actual vs. Predicted Glucose Levels')

# Add trend line
z = np.polyfit(Y_test.flatten(), Y_pred.flatten(), 1)
p = np.poly1d(z)
plt.plot(Y_test, p(Y_test), "r--")

plt.show()

# Calculating the residuals
residuals = Y_test - Y_pred

# Plotting the histogram of residuals
plt.hist(residuals, bins=20)
plt.xlabel('Residuals')
plt.ylabel('Frequency')
plt.title('Histogram of Residuals')
plt.show()